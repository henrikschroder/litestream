using System;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace MinioAdminApiExample
{
    /// <summary>
    /// A simple AWS Signature Version 4 signer.
    /// This helper computes the necessary headers so that MinIO (which uses the S3 signing mechanism)
    /// accepts our admin API requests.
    /// </summary>
    public class AwsV4Signer
    {
        public static void Sign(HttpRequestMessage request, string accessKey, string secretKey, string region, string service, string payload)
        {
            // Get the current UTC time for x-amz-date.
            DateTime now = DateTime.UtcNow;
            string amzDate = now.ToString("yyyyMMddTHHmmssZ");
            string dateStamp = now.ToString("yyyyMMdd"); // Date w/o time, used in credential scope

            // Add/replace headers required for signing.
            request.Headers.Remove("x-amz-date");
            request.Headers.Add("x-amz-date", amzDate);

            // Compute payload hash (even if the payload is empty).
            string payloadHash = Hash(payload);
            request.Headers.Remove("x-amz-content-sha256");
            request.Headers.Add("x-amz-content-sha256", payloadHash);

            // --- STEP 1: Create Canonical Request ---
            // HTTP method.
            string method = request.Method.Method;

            // Canonical URI: the absolute path of the URI (e.g. "/minio/admin/v3/add-policy").
            string canonicalUri = request.RequestUri.AbsolutePath;

            // Canonical query string (must be in sorted order).
            string canonicalQueryString = "";
            if (!string.IsNullOrEmpty(request.RequestUri.Query))
            {
                // Remove the leading '?' then sort the parameters.
                var queryParams = System.Web.HttpUtility.ParseQueryString(request.RequestUri.Query.Substring(1));
                var sortedKeys = new List<string>();
                foreach (string key in queryParams)
                    sortedKeys.Add(key);
                sortedKeys.Sort();
                var queryBuilder = new StringBuilder();
                foreach (var key in sortedKeys)
                {
                    queryBuilder.Append($"{Uri.EscapeDataString(key)}={Uri.EscapeDataString(queryParams[key])}&");
                }
                canonicalQueryString = queryBuilder.ToString().TrimEnd('&');
            }

            // Canonical headers: lower-case header names, sorted by name.
            SortedDictionary<string, string> sortedHeaders = new SortedDictionary<string, string>(StringComparer.Ordinal);
            foreach (var header in request.Headers)
            {
                sortedHeaders[header.Key.ToLower()] = string.Join(",", header.Value).Trim();
            }
            // Ensure the host header is included.
            if (!sortedHeaders.ContainsKey("host"))
            {
                sortedHeaders["host"] = request.RequestUri.Host;
            }

            StringBuilder canonicalHeadersBuilder = new StringBuilder();
            StringBuilder signedHeadersBuilder = new StringBuilder();
            foreach (var header in sortedHeaders)
            {
                canonicalHeadersBuilder.Append($"{header.Key}:{header.Value}\n");
                signedHeadersBuilder.Append($"{header.Key};");
            }
            string canonicalHeaders = canonicalHeadersBuilder.ToString();
            string signedHeaders = signedHeadersBuilder.ToString().TrimEnd(';');

            // Assemble canonical request.
            string canonicalRequest = $"{method}\n{canonicalUri}\n{canonicalQueryString}\n{canonicalHeaders}\n{signedHeaders}\n{payloadHash}";
            string hashedCanonicalRequest = Hash(canonicalRequest);

            // --- STEP 2: Create String To Sign ---
            string algorithm = "AWS4-HMAC-SHA256";
            string credentialScope = $"{dateStamp}/{region}/{service}/aws4_request";
            string stringToSign = $"{algorithm}\n{amzDate}\n{credentialScope}\n{hashedCanonicalRequest}";

            // --- STEP 3: Calculate the Signature ---
            byte[] signingKey = GetSignatureKey(secretKey, dateStamp, region, service);
            byte[] signatureBytes = HmacSHA256(signingKey, stringToSign);
            string signature = ToHexString(signatureBytes);

            // --- STEP 4: Add Signing Information to the Request ---
            string authorizationHeader = $"{algorithm} Credential={accessKey}/{credentialScope}, SignedHeaders={signedHeaders}, Signature={signature}";
            request.Headers.Remove("Authorization");
            request.Headers.Add("Authorization", authorizationHeader);
        }

        private static byte[] HmacSHA256(byte[] key, string data)
        {
            using (var hmac = new HMACSHA256(key))
            {
                return hmac.ComputeHash(Encoding.UTF8.GetBytes(data));
            }
        }

        private static byte[] GetSignatureKey(string key, string dateStamp, string regionName, string serviceName)
        {
            byte[] kDate = HmacSHA256(Encoding.UTF8.GetBytes("AWS4" + key), dateStamp);
            byte[] kRegion = HmacSHA256(kDate, regionName);
            byte[] kService = HmacSHA256(kRegion, serviceName);
            byte[] kSigning = HmacSHA256(kService, "aws4_request");
            return kSigning;
        }

        private static string Hash(string data)
        {
            using (var sha256 = SHA256.Create())
            {
                byte[] hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(data));
                return ToHexString(hash);
            }
        }

        private static string ToHexString(byte[] bytes)
        {
            var sb = new StringBuilder();
            foreach (byte b in bytes)
            {
                sb.Append(b.ToString("x2"));
            }
            return sb.ToString();
        }
    }

    class Program
    {
        // This async Main method performs the three steps.
        static async Task Main(string[] args)
        {
            // === Configuration ===
            // Admin credentials (the credentials used to run admin commands).
            string adminAccessKey = "MINIOADMIN";
            string adminSecretKey = "MINIOADMINSECRET";  // change as appropriate

            // For signing we assume region "us-east-1" and service "s3".
            string region = "us-east-1";
            string service = "s3";

            // Your MinIO server endpoint.
            string baseUrl = "http://localhost:9000";

            // New user details.
            string newUserAccessKey = "newuser";
            string newUserSecretKey = "newusersecret";

            // Policy details.
            string policyName = "limitedPolicy";
            string bucketName = "your-bucket";
            string prefix = "your-prefix";

            // Define a JSON policy that allows:
            // - Listing objects in the bucket (with a condition on prefix)
            // - Getting, putting, and deleting objects under the specified prefix.
            string policyJson = $@"{{
    ""Version"": ""2012-10-17"",
    ""Statement"": [
        {{
            ""Action"": ""s3:ListBucket"",
            ""Effect"": ""Allow"",
            ""Resource"": ""arn:aws:s3:::{bucketName}"",
            ""Condition"": {{
                ""StringLike"": {{
                    ""s3:prefix"": ""{prefix}/*""
                }}
            }}
        }},
        {{
            ""Action"": [
                ""s3:GetObject"",
                ""s3:PutObject"",
                ""s3:DeleteObject""
            ],
            ""Effect"": ""Allow"",
            ""Resource"": ""arn:aws:s3:::{bucketName}/{prefix}/*""
        }}
    ]
}}";

            using (var client = new HttpClient())
            {
                // --- 1. Add the policy ---
                string addPolicyUrl = $"{baseUrl}/minio/admin/v3/add-policy?policyName={policyName}";
                var addPolicyRequest = new HttpRequestMessage(HttpMethod.Put, addPolicyUrl)
                {
                    Content = new StringContent(policyJson, Encoding.UTF8, "application/json")
                };

                // Sign the add-policy request. (Pass the policy JSON as the payload.)
                AwsV4Signer.Sign(addPolicyRequest, adminAccessKey, adminSecretKey, region, service, policyJson);

                Console.WriteLine("Adding policy...");
                HttpResponseMessage addPolicyResponse = await client.SendAsync(addPolicyRequest);
                if (!addPolicyResponse.IsSuccessStatusCode)
                {
                    string error = await addPolicyResponse.Content.ReadAsStringAsync();
                    Console.WriteLine("Error adding policy: " + error);
                    return;
                }
                Console.WriteLine("Policy added successfully.");

                // --- 2. Add the new user ---
                string addUserUrl = $"{baseUrl}/minio/admin/v3/add-user?accessKey={newUserAccessKey}&secretKey={newUserSecretKey}";
                var addUserRequest = new HttpRequestMessage(HttpMethod.Put, addUserUrl);

                // For an empty payload, pass an empty string.
                string emptyPayload = "";
                AwsV4Signer.Sign(addUserRequest, adminAccessKey, adminSecretKey, region, service, emptyPayload);

                Console.WriteLine("Adding user...");
                HttpResponseMessage addUserResponse = await client.SendAsync(addUserRequest);
                if (!addUserResponse.IsSuccessStatusCode)
                {
                    string error = await addUserResponse.Content.ReadAsStringAsync();
                    Console.WriteLine("Error adding user: " + error);
                    return;
                }
                Console.WriteLine("User added successfully.");

                // --- 3. Attach the policy to the new user ---
                string setUserPolicyUrl = $"{baseUrl}/minio/admin/v3/set-user-policy?accessKey={newUserAccessKey}&policyName={policyName}";
                var setUserPolicyRequest = new HttpRequestMessage(HttpMethod.Put, setUserPolicyUrl);
                AwsV4Signer.Sign(setUserPolicyRequest, adminAccessKey, adminSecretKey, region, service, emptyPayload);

                Console.WriteLine("Setting user policy...");
                HttpResponseMessage setUserPolicyResponse = await client.SendAsync(setUserPolicyRequest);
                if (!setUserPolicyResponse.IsSuccessStatusCode)
                {
                    string error = await setUserPolicyResponse.Content.ReadAsStringAsync();
                    Console.WriteLine("Error setting user policy: " + error);
                    return;
                }
                Console.WriteLine("User policy set successfully.");
            }
        }
    }
}
